class Solution {
    int[][] memo;
    int[][] events;
    public int maxValue(int[][] events, int k) {
        this.events = events;
        Arrays.sort(events, (e1, e2) -> e1[0] - e2[0]);

        memo = new int[events.length][k + 1];

        for(int[] arr: memo){
            Arrays.fill(arr, -1);
        }

        return dp(0, k);
    }


    private int dp(int i, int k){
        if(i == events.length){
            return 0;
        }

        if(memo[i][k] == -1){
            //not choose
            int val1 = dp(i + 1, k);

            //choose
            int val2 = 0;

            if(k > 0){
                int pos = findFirstPos(i, events[i][1]);
                val2 = events[i][2] + dp(pos, k - 1);
            }

            memo[i][k] = Math.max(val1, val2);           

        }

        return memo[i][k];
    }


    private int findFirstPos(int idx, int time){
        int lo = idx + 1;
        int hi = events.length - 1;

        int ans = events.length;

        while(lo <= hi){
            int mid = lo + (hi - lo) / 2;

            if(events[mid][0] > time){
                ans = mid;
                hi = mid - 1;
            }
            else{
                lo = mid + 1;
            }
        }

        return ans;    

    }
}
