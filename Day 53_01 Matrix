class Solution {
    public int[][] updateMatrix(int[][] mat) {
        if (mat==null || mat.length==0)
            return new int[][]{{}};
        Queue<int[]> queue= new LinkedList();
        for(int i = 0; i< mat.length; i++){
            for(int j = 0; j < mat[0].length; j++){
                if (mat[i][j]==0)
                    queue.offer(new int[]{i, j});
                else
                    mat[i][j]=-1;
            }
        }
        int m = mat.length, n = mat[0].length;
        int[][] dirs = new int[][]{{0,1},{1,0},{0, -1},{-1, 0}};
        int len = 0;
        while(!queue.isEmpty()){
            int size=queue.size();
            len++;
            while(size-->0){
            int[] current = queue.poll();
            for(int[] dir:dirs){
                int nr = current[0]+dir[0];
                int nc = current[1]+dir[1];
                if (nr<0 || nr >= m || nc <0 || nc >= n|| mat[nr][nc]!=-1)
                    continue;
                mat[nr][nc]=len;
                queue.offer(new int[]{nr,nc});
            }
            }
        }
        return mat;
    }
}
